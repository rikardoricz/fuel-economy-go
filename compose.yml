services:
  app:
    build:
      context: .
    container_name: fuel-economy-go-app
    env_file: .env
    environment:
      PORT: ${PORT}
      POSTGRES_HOST: ${POSTGRES_HOST}
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_USER: ${POSTGRES_USER}
    ports:
      - "8000:8000"
    depends_on:
      db:
        condition: service_healthy
    networks:
      - fuel-economy-network
    restart: unless-stopped

  db:
    image: postgres:alpine
    container_name: postgres-fuel-go
    env_file: .env
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    healthcheck:
      test: [ CMD-SHELL, "sh -c 'pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}'" ]
      interval: 10s
      timeout: 5s
      retries: 5
    volumes:
      - postgres_data:/data/postgres
    ports:
      - ${POSTGRES_PORT}:5432
    networks:
      - fuel-economy-network
    restart: unless-stopped

  pgadmin:
    image: dpage/pgadmin4
    container_name: pgadmin-fuel-go
    env_file: .env
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_EMAIL}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_PASSWORD}
    ports:
      - ${PGADMIN_PORT}:80
    depends_on:
      - db
    networks:
      - fuel-economy-network
    restart: unless-stopped

  migrate:
    build: .
    command: ["./migrate/migrate"]
    environment:
      POSTGRES_HOST: ${POSTGRES_HOST}
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PORT: ${POSTGRES_PORT}
    depends_on:
      - db
    networks:
      - fuel-economy-network

volumes:
  postgres_data:

networks:
  fuel-economy-network:
